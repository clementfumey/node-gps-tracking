{
  "author": {
    "name": "Franklin van de Meent",
    "email": "fr@nkl.in",
    "url": "http://frankl.in"
  },
  "name": "tk102",
  "description": "Unofficial Xexun TK102 GPS server",
  "version": "1.1.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/fvdm/nodejs-tk102.git"
  },
  "bugs": {
    "url": "https://github.com/fvdm/nodejs-tk102/issues"
  },
  "main": "tk102.js",
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "keywords": [
    "gps",
    "tk102",
    "server"
  ],
  "license": {
    "type": "Public Domain",
    "url": "https://github.com/fvdm/nodejs-tk102/raw/master/UNLICENSE"
  },
  "readme": "TK102 GPS server for Node.js\n============================\n\nThe Xexun TK102 is a GPS device that can send coordinates over TCP to a server via GPRS. This Node.js script creates a TCP server that listens for GPRMC data, parse it and send the data to your post-process function. The parsed data is provided in a clean easy to use object, so you can easily store it in a database or push to a websocket server, for example.\n\n\nPrepare device\n--------------\n\nAssuming your simcard has enough SMS and data credits and the TK102 is configured for your provider's APN, simply send `adminip123456 IP PORT` where obviously `IP` is the server's IP, `PORT` is the port to listen on and `123456` is your admin password. :) It cannot take hostnames as it has no dns features on board.\n\nActivate sending coordinates: **t030s003n123456**\n\nThis tells the device to send its location AFTER each **30** seconds and no more than **3** times. 30 seconds is the minimum. Send `t030s***n123456` to go on for infinity.\n\n* **s** can also be **m** or **h**\n* To end tracking send `notn123456`\n\n\nInstallation\n------------\n\n### NPM registry\n\nThe most easy way is to install from the [NPM registry](https://npmjs.org/). This is always the most recent *stable* version.\n\n\tnpm install tk102\n\n\n### Github source\n\nOr you can clone the Github repository for the most recent code, but this may be *untested*.\n\n\tgit clone https://github.com/fvdm/nodejs-tk102\n\tnpm install ./nodejs-tk102\n\n\nUsage\n-----\n\n```javascript\nvar server = require('tk102')\n\n// start server\nserver.createServer({\n        port: 1337\n})\n\n// incoming data\nserver.on( 'track', function( gps ) {\n        console.log( gps )\n})\n```\n\nSettings\n--------\n\n```javascript\nserver.createServer({\n        ip:             '1.2.3.4',  // default 0.0.0.0 (all ips)\n        port:           0,          // default 0 = random, see 'listening' event\n        connections:    10,         // simultaneous connections\n        timeout:        10          // idle timeout in seconds\n})\n```\n\nEvents\n------\n\nThe server emits the following events about the server status and incoming GPS pushes.\n\ntrack ( gpsObject )\n-------------------\n\nThe GPRMC push from the device.\n\n```javascript\nserver.on( 'track', function( gps ) {\n        { raw: '1203301642,0031698765432,GPRMC,144219.000,A,5213.0327,N,00516.7759,E,0.63,179.59,300312,,,A*6D,F,imei:123456789012345,123',\n          datetime: '2012-03-30 16:42',\n          phone: '0031698765432',\n          gps: { date: '2012-03-30', time: '14:42:19.000', signal: 'full', fix: 'active' },\n          geo: { latitude: 52.130326, longitude: 5.167759, bearing: 179 },\n          speed: { knots: 0.63, kmh: 1.167, mph: 0.725 },\n          imei: '123456789012345' }\n})\n```\n\n* **raw:** the input string without trailing whitespace\n* **datetime:** the device 24h clock\n* **phone:** the admin phonenumber that initiated this tracking\n* **gps:**\n\t* **date:** date as received from satellites\n\t* **time:** time in 24h UTC as received from satellites\n\t* **signal:** GPS signal strength, either _full_ or _low_\n\t* **fix:** GPS fix, either _active_ or _invalid_\n* **geo:**\n\t* **latitude:** position latitude\n\t* **longitude:** position longitude\n\t* **bearing:** direction in degrees\n* **speed:**\n\t* **knots:** speed in knots per hour\n\t* **kmh:** speed in kilometer per hour\n\t* **mph:** speed in miles per hour\n* **imei:** device IMEI\n\ndata ( rawString )\n------------------\n\nThe raw unprocessed inbound data.\n\n```javascript\nserver.on( 'data', function( raw ) {\n        console.log( 'Incoming data: '+ raw )\n})\n```\n\nlistening ( listeningObject )\n-----------------------------\n\nVery useful to find out random port (0).\n\n```javascript\nserver.on( 'listening', function( listen ) {\n        { port: 56751, family: 2, address: '0.0.0.0' }\n})\n```\n\nconnection ( socket )\n---------------------\n\nEmitted when a connection is established with the server, includes the socket.\n\n```javascript\nserver.on( 'connection', function( socket ) {\n        console.log( 'Connection from '+ socket.remoteAddress )\n})\n```\n\ntimeout ( socket )\n------------------\n\nEmitted when a connection expires.\n\n```javascript\nserver.on( 'timeout', function( socket ) {\n        console.log( 'Time-out from '+ socket.remoteAddress )\n})\n```\n\nfail ( Error )\n--------------\n\nEmitted when data cannot be parsed.\nUseful for debugging device issues.\n\n`Error` is an `instanceof Error` with .stack trace.\n\n```js\nserver.on( 'fail', function( err ) {\n\tconsole.log( err )\n})\n```\n\nerror ( Error )\n---------------\n\nEmitted when a server related error occured.\n\n`Error` is an `instanceof Error` with .stack trace.\n\n\n### Messages\n\n\tServer error               Catch server failures\n\tSocket error               Catch communication failures\n\tIP or port not available   This catches EADDRNOTAVAIL errors\n\n\n```js\nserver.on( 'error', function( err ) {\n\tconsole.log( err )\n})\n```\n\n\nNotes\n-----\n\nI'm not sure how this works with TK102-2 and other similar devices, I wrote this strictly for the TK102 as I only have one of those. There is no security built in, anyone could push GPRMC data to your server.\n\n\nUnlicense\n---------\n\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org>\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/fvdm/nodejs-tk102",
  "_id": "tk102@1.1.0",
  "dist": {
    "shasum": "5daefd2d0bd7dcff4c8594b9f1b4dbb4ad3bc07d"
  },
  "_from": "tk102@~1.1.0",
  "_resolved": "https://registry.npmjs.org/tk102/-/tk102-1.1.0.tgz"
}
